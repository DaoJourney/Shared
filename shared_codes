import boto3

def assume_role(role_arn, session_name):
    sts_client = boto3.client('sts')
    response = sts_client.assume_role(
        RoleArn=role_arn,
        RoleSessionName=session_name
    )
    credentials = response['Credentials']
    return boto3.Session(
        aws_access_key_id=credentials['AccessKeyId'],
        aws_secret_access_key=credentials['SecretAccessKey'],
        aws_session_token=credentials['SessionToken']
    )

def create_certificate(account_id):
    role_arn = f"arn:aws:iam::{account_id}:role/YourCrossAccountRoleName"
    assumed_session = assume_role(role_arn, "AssumedSession")
    acm_client = assumed_session.client('acm')
    
    response = acm_client.request_certificate(
        DomainName='example.com',
        ValidationMethod='DNS',
        IdempotencyToken='UNIQUE_TOKEN'
    )
    
    certificate_arn = response['CertificateArn']
    return certificate_arn

def lambda_handler(event, context):
    destination_account_id = "12390843"  # Substitua pelo ID da conta de destino
    certificate_arn = create_certificate(destination_account_id)
    
    return {
        "statusCode": 200,
        "body": f"Certificate created: {certificate_arn}"
    }
